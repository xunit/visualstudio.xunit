<Project>
  <Import Project="..\Versions.props" />

  <PropertyGroup>
    <DebugType>embedded</DebugType>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <LangVersion>12.0</LangVersion>
    <MSBuildCopyContentTransitively>false</MSBuildCopyContentTransitively>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="ILRepack" Version="$(ILRepack_Version)">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="$(Microsoft_SourceLink_GitHub_Version)" PrivateAssets="all" />
    <PackageReference Include="Microsoft.TestPlatform.ObjectModel" Version="$(Microsoft_TestPlatform_ObjectModel_Version)" PrivateAssets="All" />
    <PackageReference Include="Nerdbank.GitVersioning" Version="$(Nerdbank_GitVersioning_Version)" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net472' ">
    <PackageDownload Include="Microsoft.NETCore.App.Ref" Version="[$(Microsoft_NetCore_App_Ref_Version)]" />
    <PackageReference Include="TunnelVisionLabs.ReferenceAssemblyAnnotator" Version="$(TunnelVisionLabs_ReferenceAssemblyAnnotator_Version)" PrivateAssets="All" />
  </ItemGroup>

  <!-- Enable building .NET Framework on non-Windows machines -->
  <ItemGroup Condition=" '$(TargetFrameworkIdentifier)' == '.NETFramework' ">
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="$(Microsoft_NETFramework_ReferenceAssemblies_Version)" PrivateAssets="All" />
  </ItemGroup>

  <!-- Support deterministic builds (via https://github.com/clairernovotny/DeterministicBuilds) -->
  <PropertyGroup>
    <ContinuousIntegrationBuild Condition=" '$(GITHUB_ACTIONS)' == 'true' ">true</ContinuousIntegrationBuild>
    <TargetFrameworkMonikerAssemblyAttributesPath Condition="'$(TargetFrameworkMoniker)' != ''">$([System.IO.Path]::Combine('$(IntermediateOutputPath)','$(TargetFrameworkMoniker).AssemblyAttributes$(DefaultLanguageSourceExtension)'))</TargetFrameworkMonikerAssemblyAttributesPath>
  </PropertyGroup>
  <ItemGroup>
    <EmbeddedFiles Include="$(GeneratedAssemblyInfoFile)" />
  </ItemGroup>

  <!-- Use ILRepack to pack in most dependencies rather than ship them separately -->
  <Target
      Name="ILRepack"
      AfterTargets="Build"
      Condition=" '$(TargetFramework)' != '' ">
    <PropertyGroup>
      <OutputAssembly>$([System.IO.Path]::Combine($(TargetDir), "merged", "$(TargetFileName)"))</OutputAssembly>
    </PropertyGroup>

    <Message Text="$(TargetName) -> $(OutputAssembly)" Importance="High" />
    <CallTarget Targets="ILRepackConditional" />
  </Target>

  <Target
      Name="ILRepackConditional"
      Inputs="$(TargetPath)"
      Outputs="$(TargetDir)merged\$(TargetFileName)">

    <MakeDir Directories="$(TargetDir)merged" />

    <PropertyGroup>
      <MainAssembly>$([System.IO.Path]::Combine($(TargetDir), "$(TargetFileName)"))</MainAssembly>
      <OutputAssembly>$([System.IO.Path]::Combine($(TargetDir), "merged", "$(TargetFileName)"))</OutputAssembly>
    </PropertyGroup>

    <ItemGroup>
      <ILRepackExclusions Include="$(TargetDir)xunit.abstractions.dll;$(TargetDir)Microsoft.TestPlatform.*.dll;$(TargetDir)Microsoft.VisualStudio.*.dll" />
      <ILRepackDependencies
          Include="$(TargetDir)*.dll"
          Exclude="$(MainAssembly);@(ILRepackExclusions)"/>
      <ILRepackLibPaths Include="$(TargetDir)" />
      <ILRepackLibPaths Include="$(TargetFrameworkRootPath)$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)\" Condition=" '$(TargetFrameworkRootPath)' != '' " />
    </ItemGroup>

    <Copy SourceFiles="@(ILRepackExclusions)" DestinationFolder="$(TargetDir)merged" />
    <Exec
        StandardOutputImportance="low"
        IgnoreStandardErrorWarningFormat="true"
        Command="dotnet &quot;$(ILRepack)&quot; -internalize -ndebug @(ILRepackLibPaths->'-lib:%(FullPath)', ' ') -out:$(OutputAssembly) $(MainAssembly) @(ILRepackDependencies, ' ')" />
    <Exec Command="chmod +x '$(OutputAssembly)'" Condition=" '$(OS)' != 'Windows_NT' AND $(OutputAssembly.EndsWith('.exe')) " />
  </Target>

  <!-- Supplement Nerdbank.GitVersioning version calculations -->
  <Target Name="UpdateAssemblyVersionInfo" BeforeTargets="GenerateAssemblyNBGVVersionInfo" DependsOnTargets="GetBuildVersion">
    <PropertyGroup>
      <!-- Local builds should have a '-dev' suffix on the build number -->
      <PrereleaseSuffix Condition=" '$(GITHUB_ACTIONS)' != 'true' ">-dev</PrereleaseSuffix>
      <!-- AssemblyVersion and AssemblyFileVersion should be x.y.z.0 -->
      <AssemblyVersion>$(BuildVersionSimple)</AssemblyVersion>
      <AssemblyFileVersion>$(BuildVersionSimple)</AssemblyFileVersion>
      <!-- Always put the Git hash in the informational version, even for non-pre-release versions -->
      <AssemblyInformationalVersion>$(BuildVersionSimple)$(PrereleaseVersion)$(PrereleaseSuffix)+$(GitCommitIdShort)</AssemblyInformationalVersion>
    </PropertyGroup>
  </Target>

  <Target Name="UpdateNuSpecProperties" BeforeTargets="GenerateNuspec" DependsOnTargets="GetBuildVersion">
    <PropertyGroup>
      <SignedPath />
      <SignedPath Condition=" '$(SIGN_APP_SECRET)' != '' ">signed\</SignedPath>
      <!-- Local builds should have a '-dev' suffix on the build number -->
      <PrereleaseSuffix Condition=" '$(GITHUB_ACTIONS)' != 'true' ">-dev</PrereleaseSuffix>
      <!-- Never put the Git hash in the package version -->
      <PackageVersion>$(BuildVersionSimple)$(PrereleaseVersion)$(PrereleaseSuffix)</PackageVersion>
      <!-- Pass through values we don't know ahead of time for any hand-crafted .nuspec files -->
      <NuspecProperties>
        Configuration=$(Configuration);
        GitCommitId=$(GitCommitId);
        Microsoft_NET_Test_Sdk_Version=$(Microsoft_NET_Test_Sdk_Version);
        Microsoft_TestPlatform_ObjectModel_Version=$(Microsoft_TestPlatform_ObjectModel_Version);
        PackageVersion=$(PackageVersion);
        SignedPath=$(SignedPath);
      </NuspecProperties>
    </PropertyGroup>
  </Target>

</Project>
